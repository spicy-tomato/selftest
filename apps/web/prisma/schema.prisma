datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  tests         Test[]
  testAttempts  TestAttempt[]
  createdAt     DateTime
  updatedAt     DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model QuestionBank {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  questions   Question[]
  createdAt   DateTime
  updatedAt   DateTime   @updatedAt
}

model Question {
  id           String       @id @default(cuid())
  bankId       String
  questionText String
  explanation  String?
  type         QuestionType @default(SINGLE_CHOCE)
  answers      Answer[]
  tests        Test[]
  createdAt    DateTime
  updatedAt    DateTime     @updatedAt
  questionBank QuestionBank @relation(fields: [bankId], references: [id], onDelete: Cascade)
}

model Answer {
  id          String   @id @default(cuid())
  questionId  String
  answerText  String
  isCorrect   Boolean  @default(false)
  explanation String?
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Test {
  id             String        @id @default(cuid())
  userId         String
  title          String
  description    String?
  isPublic       Boolean       @default(false)
  totalQuestions Int
  questions      Question[]
  attempts       TestAttempt[]
  createdAt      DateTime
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestAttempt {
  id             String   @id @default(cuid())
  userId         String
  testId         String
  score          Float
  totalQuestions Int
  correctAnswers Int
  startedAt      DateTime
  completedAt    DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  test           Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  SINGLE_CHOCE
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}
