name: Web CD
run-name: Web CD - ${{ github.ref_type == 'tag' && github.ref_name || github.event.inputs.version || 'latest' }}${{ github.event.inputs.dry-run == 'true' && ' (dry-run)' || '' }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version of the Docker image (exclude prefix), default to latest"
        required: false

      dry-run:
        description: "Dry run the workflow"
        required: true
        type: choice
        default: "false"
        options:
          - true
          - false

jobs:
  deploy-container:
    runs-on: ubuntu-22.04

    steps:
      # Setup initial branch default to master
      - name: Setup initial branch
        run: |
          git config --global init.defaultBranch master

      - name: Determine version
        run: |
          if [[ "${{ github.ref_type }}" == tag ]]; then
            # Extract the tag name
            VERSION=${{ github.ref_name }}
            VERSION=${VERSION#web-}
          else
            # Use the version from inputs or default to "latest"
            VERSION="${{ github.event.inputs.version || 'latest' }}"
          fi
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Verify Docker tag
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/selftest-web
          VERSION="${{ env.version }}"

          echo "Checking if Docker tag $IMAGE_NAME:$VERSION exists..."

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/$VERSION/")

          if [[ "$STATUS" == "200" ]]; then
            echo "Docker tag $VERSION exists."
          else
            echo "Docker tag $VERSION does not exist. Exiting..."
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate .env file
        run: |
          chmod +x ./scripts/generate-env.sh
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} VERSION=${{ env.version }} \
          WEB_DOMAIN=${{ secrets.WEB_DOMAIN }} WEB_CERT_PATH=${{ secrets.WEB_CERT_PATH }} \
          WEB_PORT=${{ vars.WEB_PORT }} DEFAULT_NETWORK=${{ vars.DEFAULT_NETWORK }} \
          ./scripts/generate-env.sh \
          DOCKER_USERNAME VERSION WEB_DOMAIN WEB_CERT_PATH WEB_PORT DEFAULT_NETWORK
        shell: bash

      - name: Add server to known_hosts
        run: |
          # Create the .ssh directory if it doesn't exist
          mkdir -p ~/.ssh
          # Add the server's host key to the known_hosts file
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          echo "Host key added to known_hosts"

      - name: Add SSH private key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy files to server
        if: ${{ github.event.inputs.dry-run != 'true' }}
        run: |
          # Define server path
          WEB_PATH="${{ secrets.WEB_PATH }}"

          # Transfer files using rsync
          echo "Copying .env file..."
          rsync -e "ssh -o StrictHostKeyChecking=no" .env ${{ secrets.SSH_USER }}@${{ secrets.VPS_HOST }}:$WEB_PATH/

          echo "Copying docker-compose.yml..."
          rsync -e "ssh -o StrictHostKeyChecking=no" ./apps/web/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.VPS_HOST }}:$WEB_PATH/

          # Run Docker Compose on the server
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.VPS_HOST }} \
            "docker compose -f $WEB_PATH/docker-compose.yml up -d --force-recreate"
